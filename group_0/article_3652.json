{
  "url": "https://www.wikihow.com/Become-a-Programmer",
  "title": "How to Become a Programmer",
  "steps": [
    {
      "title": "Take an introductory course in one (or all of them) of the following disciplines:",
      "content": "Take an introductory course in one (or all of them) of the following disciplines: Logic Discrete mathematics Programming language (take a part into the different programming paradigms, starting from sequential/procedural to object oriented, after functional and logical programming. Preferable Ruby/ Python/Pascal for beginners and after some good understanding go deeper into C++/C#/Java )"
    },
    {
      "title": "Learn database concepts such as tables, views/queries and procedures.",
      "content": "Learn database concepts such as tables, views/queries and procedures. You can use any simple database package to do this, such as: MS Access DB V Fox Pro Paradox MySQL is a good database to learn because itâ€™s free, commonly used, and databases are commonly accessed with SQL queries"
    },
    {
      "title": "Decide what type of programmer you want to be.",
      "content": "Decide what type of programmer you want to be. Programmers generally fall under one of the following categories: Web programmer Desktop application programmer Operating system (OS) oriented programmer(tied to a single operating system or set of operating systems) Platform-independent programmer Distributed applications programmer Library/platform/framework/core programmer System programmer Kernel programmer Driver programmer Compiler programmer Programming scientist"
    },
    {
      "title": "Learn the technologies and programming languages related to your programming field of choice.",
      "content": "Learn the technologies and programming languages related to your programming field of choice. The following sections break down the tasks for different types of programming."
    },
    {
      "title": "Know what Web programming entails.",
      "content": "Know what Web programming entails. Web applications are software components designed to work on top of the internet architecture. This means that the applications are accessed through a web browser software such as Firefox or Internet Explorer. Being built on top of the Internet architecture does not necessarily require an active connection to the internet. It means that Web applications are built on top of standard web technologies such as: HTTP FTP POP3 SMTP TCP IP protocols HTML XML Coldfusion ASP JSP PHP ASP.NET"
    },
    {
      "title": "Browse",
      "content": "Browse many diverse websites to learn about how they usually look. (Right click, then click View Source or press F12.) Look for diversity in the type/content of the website, not the quantity of websites visited. Generally, you will need to visit at least one of each of the following types of websites: Corporate presence sites (commercial corporations, not-for-profit corporate/organizations, governmental organizations) Web indexing engines (search engines, meta search sites, specialized search engines, directories) Data mining sites Personal sites Informational/encyclopedic pages (wikis, data sheets, technical specifications, and manuals listing directories, blogs and journals, news and news agencies sites, yellow pages, etc.) Social sites (social portals, bookmarking sites, note-taking sites) Collaborative sites (this includes other categories mentioned above, such as wikis and blogs)"
    },
    {
      "title": "Learn at least one brainstorming technique/method and a software that is used to implement that method.",
      "content": "Learn at least one brainstorming technique/method and a software that is used to implement that method. For example: brainstorming diagrams and MS Visio."
    },
    {
      "title": "Get familiar with website structuring.",
      "content": "Get familiar with website structuring . This is creating conceptual web diagrams, site-maps, and navigation structures."
    },
    {
      "title": "Take a crash course on graphics design.",
      "content": "Take a crash course on graphics design. Try to learn at least one graphics editing/manipulation software package (optional, but strongly recommended)"
    },
    {
      "title": "Learn the basics of the internet infrastructure.",
      "content": "Learn the basics of the internet infrastructure. This includes getting a basic idea about: Base Web services protocols (HTTP, FTP, SMTP, and POP3 or IMAP4) Web server software (preferably, one for the platform you will be working on mostly) Web browsing software. Email server and client software"
    },
    {
      "title": "Learn the HTML and CSS languages.",
      "content": "Learn the HTML and CSS languages. You might also want to get the \"What You See Is What You Get (WYSIWYG)\" software package for editing HTML."
    },
    {
      "title": "Learn XML and XML related technologies, such as XSL and XPath (optional but recommended).",
      "content": "Learn XML and XML related technologies, such as XSL and XPath (optional but recommended)."
    },
    {
      "title": "Create simple static websites until you are familiar with and comfortable around HTML.",
      "content": "Create simple static websites until you are familiar with and comfortable around HTML ."
    },
    {
      "title": "Learn a client-side scripting language.",
      "content": "Learn a client-side scripting language. Most users learn JavaScript. Some learn VBScript , but this isn't compatible with most browsers."
    },
    {
      "title": "Familiarize yourself with the client-side scripting language you learned.",
      "content": "Familiarize yourself with the client-side scripting language you learned. Try to reach your potential using only that language. Only go to the next step after you've at least become familiar with your client-side scripting language."
    },
    {
      "title": "Learn at least one server-side programming language.",
      "content": "Learn at least one server-side programming language. If you choose to restrict yourself to one server software, learn one of the programming languages supported by that software. If not, learn at least one programming language on each server software."
    },
    {
      "title": "Create a pilot project",
      "content": "Create a pilot project for yourself after you finish learning the server-side programming language."
    },
    {
      "title": "Obtain your own website",
      "content": "Obtain your own website and start experimenting online within your own page."
    },
    {
      "title": "Know what you're getting into with desktop application programming.",
      "content": "Know what you're getting into with desktop application programming. Most desktop programmers write code for business solutions, so getting an idea about businesses, their organizational and financial structure will be a big time-saver ."
    },
    {
      "title": "Learn about the different computer hardware architectures.",
      "content": "Learn about the different computer hardware architectures. An introductory level course in digital circuits design and another in computer architecture is useful; however, some see it as being advanced for a starting point, so reading two or three tutorial articles (such as this one and this one ) might suffice. Then you can go back to this step later, after you learn your first programming language."
    },
    {
      "title": "Learn an entry-level (kids') programming language.",
      "content": "Learn an entry-level (kids') programming language . Don't be shy to learn such a language just because you're older than being called a \"kid\". An example of these programming languages can be Scratch. These programming languages can ease up the pain in learning your first programming language tremendously. However, this step is optional. It can also be done before the preceding step."
    },
    {
      "title": "Get an introduction to the procedural, object oriented, and functional programming paradigms.",
      "content": "Get an introduction to the procedural , object oriented , and functional programming paradigms ."
    },
    {
      "title": "Take an introductory course in one of the procedural programming languages.",
      "content": "Take an introductory course in one of the procedural programming languages . No matter what language you choose later to be your language of choice, it will require procedural programming at some level. Also, procedural programming is reported by most programmers to be the easiest to use as a starting point to get the idea of programming in general."
    },
    {
      "title": "Learn at least one advanced modeling technique such as UML or ORM.",
      "content": "Learn at least one advanced modeling technique such as UML or ORM."
    },
    {
      "title": "Start writing some small console or console-like applications.",
      "content": "Start writing some small console or console-like applications. You can make use of common small exercises in programming languages books. For this, choose a tool for writing programs in the programming language you are writing in."
    },
    {
      "title": "Take a more advanced course in your chosen programming language.",
      "content": "Take a more advanced course in your chosen programming language. Make sure you understand the following concepts well and that you can apply them with relative ease before going forward: Inputting and outputting information to users of a program. The logical flow and the execution flow of programs in procedural languages. Declaring, assigning and comparing variables. Branching programming constructs such as if..then..else and select/switch..case. Looping constructs such as while..do, do..while/until, for..next. Your programming language syntax for creating and calling procedures and functions. Data types and manipulating them. User defined data types (records/structs/units) and their use. If your language supports overloading functions , understand it. The memory accessing methods of your language of choice (pointers, peeking, etc.) If your language supports operators overloading , understand it. If your language supports delegates/function pointers, understand it."
    },
    {
      "title": "Apply the advanced techniques you've learned.",
      "content": "Apply the advanced techniques you've learned."
    },
    {
      "title": "Take an introductory course in at least one more programming language in another programming paradigm.",
      "content": "Take an introductory course in at least one more programming language in another programming paradigm. It is recommended to learn one programming language of each paradigm, and most advanced programmers do, however, you usually start with one, work for a while applying your knowledge and practicing it, then learn the other later on, after you already had a real-life experience in programming. Try one of the following language areas: Logic programming paradigm. Functional programming paradigm. Object-oriented paradigm."
    },
    {
      "title": "Try to compare the two programming languages you learned so far.",
      "content": "Try to compare the two programming languages you learned so far. Evaluate the strengths and weaknesses of each one. Usually this is done by: Taking simple samples of your early work in the first programming language and re-write it using the second programming language. Creating a new project and try implementing it using both languages. Sometimes, depending on your choice of project and languages, you might not be able to implement the project in one of the languages! Writing a cheat-sheet or summary-table comparisons between similar constructs in the two languages and features unique to each of the languages. Try finding ways to mimic features that is unique to one of the two languages using the other language."
    },
    {
      "title": "Learn visual programming concepts using one of the languages you learned.",
      "content": "Learn visual programming concepts using one of the languages you learned. Almost all programming languages have versions/libraries that support visual programming and others supporting console or console-like programming. This can be accomplished by: Get an introduction to event-driven programming. Most visual programming relies in some level on events and events handling (using the programming language you choose). Try as much desktop software as you can and understand what the software does. Most software development companies offer beta-testing versions of their products which you can use to test the software. Keep up-to-date on user interface advancements. Read some articles or tutorials on graphical user interfaces."
    },
    {
      "title": "Start applying your knowledge on small software projects you design.",
      "content": "Start applying your knowledge on small software projects you design. Try applying your programming expertise on problems you face in your day-to-day life. For example, write programs that rename files in mass, compares text files visually, copies the names of files in a directory to memory/text file, and things like that. Keep it simple at first."
    },
    {
      "title": "Create a virtual graduation project.",
      "content": "Create a virtual graduation project . Complete this to the end, applying the techniques of visual programming you learned so far."
    },
    {
      "title": "Widen your understanding of the visual framework/library/package you learned before by taking advanced courses, paying extra attention to detail and learning more tips and tricks for your framework from online resources.",
      "content": "Widen your understanding of the visual framework/library/package you learned before by taking advanced courses, paying extra attention to detail and learning more tips and tricks for your framework from online resources."
    },
    {
      "title": "Search for other packages/libraries of visual elements for your programming languages and learn them.",
      "content": "Search for other packages/libraries of visual elements for your programming languages and learn them."
    },
    {
      "title": "Take a course in graphics (not graphics design).",
      "content": "Take a course in graphics (not graphics design). It will be very helpful for programmers wanting to write appealing user-interface elements."
    },
    {
      "title": "Consider becoming a games programmer (optional).",
      "content": "Consider becoming a games programmer (optional). Game programming is considered, in most of its parts, desktop programming. If you intend to become a games programmer, you will need to learn more about game programming after you finish these steps. A graphics course is a must for game programmers and the second language of choice in the preceding steps should be a logic/functional programming language (preferably Prolog or Lisp)."
    },
    {
      "title": "Tackle distributed applications programming.",
      "content": "Tackle distributed applications programming. Distributed application programming is considered by many to be one of the hardest to learn and requires diverse knowledge in computer and communication technologies."
    },
    {
      "title": "Take a speed introduction to telephony systems and their hardware.",
      "content": "Take a speed introduction to telephony systems and their hardware. This step is optional. However, it is very useful in understanding network topologies."
    },
    {
      "title": "Familiarize yourself with networking hardware architectures and devices such as hubs, switches and routers.",
      "content": "Familiarize yourself with networking hardware architectures and devices such as hubs, switches and routers."
    },
    {
      "title": "Take a course in networking protocols and essentials.",
      "content": "Take a course in networking protocols and essentials. You need a good understanding of the Open Systems Interconnection (OSI) model, Ethernet, IP, TCP, UDP and HTTP before you start programming distributed applications."
    },
    {
      "title": "Learn the XML language and familiarize yourself with it.",
      "content": "Learn the XML language and familiarize yourself with it."
    },
    {
      "title": "Start by learning a shell scripting language.",
      "content": "Start by learning a shell scripting language. For Windows-based programming, that would be any script that works with Windows Scripting Host. For Linux-based programming, Bash scripts and Perl will be sufficient. JavaScript is strongly recommended for this in both platforms for the following reasons: It is supported by almost any scripting host in any operating system (Windows Scripting Host supports JavaScript by default, most Linux distributions has a package for JavaScript scripting console support). It is considered to be easier to learn by many developers. It has an ALGOL derived syntax which familiarizes you with much more other programming languages when you need to choose a second programming language ( C , C++ , C#, Java and J# all have ALGOL derived syntax). By learning JavaScript, you familiarize yourself with client-side scripting of web pages which is a bonus side-effect!"
    },
    {
      "title": "Apply only procedural programming using your scripting language of choice at first.",
      "content": "Apply only procedural programming using your scripting language of choice at first. Later, you can use more advanced programming techniques and paradigms according to your scripting language and what it supports. All scripting languages have some procedural programming aspects at some level."
    },
    {
      "title": "Use the scripting language you learned to write scripts that perform communications between machines.",
      "content": "Use the scripting language you learned to write scripts that perform communications between machines. Learn what is necessary for doing that. Simple communications will suffice."
    },
    {
      "title": "Make a transfer to a desktop scripting/programming language.",
      "content": "Make a transfer to a desktop scripting/programming language. Preferably, one that is a multi-paradigm language such as Python . Take a simple introduction to that second language. Java is considered by most programmers to be the language of choice for many reasons. However, C# is gaining momentum fast in this field. Java and C# are preferred for the following reasons: They are object oriented programming languages which shields programmers in large teams from implementation details as they both supports components (units of code, pre-compiled, that perform a certain task and can be used in other programs). They support event-driven programming, as well as OO and procedural programming at some level. The framework that the language is built upon is distributed by nature (in the case of Java). The availability of many ready-made packages that deal with networking , both as open-source code and framework built-in packages; this makes it easier for programmers to build upon the work of others."
    },
    {
      "title": "Concentrate",
      "content": "Concentrate more on the core features of the language, especially those supporting networking. Pay less attention to user-interface elements such as outputting, window design and techniques, and user-interface elements."
    },
    {
      "title": "Take a course on distributed applications design and architectures.",
      "content": "Take a course on distributed applications design and architectures. This can be done using books, online tutorials or academic courses. However, understanding the architecture of distributed applications and its concepts is necessary."
    },
    {
      "title": "Learn about building serviced components and services using your programming language of choice.",
      "content": "Learn about building serviced components and services using your programming language of choice."
    },
    {
      "title": "Learn one or more of the following technologies.",
      "content": "Learn one or more of the following technologies. It is recommended that you get at least an introduction to all of them. Most distributed application programmers do not stop at one or two programming languages, but learn at least one programming language on each operating system. That is because if you want your application to be \"distributed\", you should provide a version of it at least for each major operating system. Common Object Request Broker Architecture ( CORBA ) Simple Object Access Protocol ( SOAP ) Asynchronous JavaScript and XML ( AJAX ) Distributed Component Object Model ( DCOM ) .NET Remoting XML Web Services"
    },
    {
      "title": "Know what core programming is.",
      "content": "Know what core programming is. Core programmers are merely advanced programmers who made the transfer from programming applications to programming code units to be used by other programmers."
    },
    {
      "title": "Learn a programming language that supports building reusable components/packages, if you have not done so already.",
      "content": "Learn a programming language that supports building reusable components/packages, if you have not done so already."
    },
    {
      "title": "Take an advanced course in UML and ORM.",
      "content": "Take an advanced course in UML and ORM. Most library developers use one or both of them."
    },
    {
      "title": "Take a course in software engineering.",
      "content": "Take a course in software engineering ."
    },
    {
      "title": "Learn at least modular, component-based, object-oriented, and event-driven programming techniques and concepts.",
      "content": "Learn at least modular, component-based, object-oriented, and event-driven programming techniques and concepts. The more programming paradigms and languages you cover, the more successful you become as a library/package programmer."
    },
    {
      "title": "Learn more about the different operating systems and programming frameworks supported by these operating systems.",
      "content": "Learn more about the different operating systems and programming frameworks supported by these operating systems."
    },
    {
      "title": "Focus your learning efforts on platform-independent frameworks, programming languages and technologies.",
      "content": "Focus your learning efforts on platform-independent frameworks, programming languages and technologies."
    },
    {
      "title": "If the programming languages you learned so far have ANSI/ISO/IEEE/W3C standard versions, master the standards.",
      "content": "If the programming languages you learned so far have ANSI / ISO / IEEE / W3C standard versions, master the standards. Try to use standard code whenever possible."
    },
    {
      "title": "Try to mimic simple, already established libraries, especially open-source ones.",
      "content": "Try to mimic simple, already established libraries , especially open-source ones. This is useful during the early phase of becoming a library/package programmer. Start with simple packages like units conversion and intermediate scientific calculations packages. If you are a college student, make use of your non-programming courses by trying to implement their equations and scientific core as libraries."
    },
    {
      "title": "Search for and try open-source packages in your field of programming.",
      "content": "Search for and try open-source packages in your field of programming. First download binaries/executables of the package. Try to use it and find its strong and weak points. After you've done that, download the source and try to figure out how it was done. Try to recreate those libraries or parts of them. At first, do that after you've seen the code and later before you see the code. At later phases, try improving those libraries."
    },
    {
      "title": "Learn the different approaches used to distribute and deploy components to programmers.",
      "content": "Learn the different approaches used to distribute and deploy components to programmers. Usually, library/package programmers tend to think recursively and/or iteratively of all problems they are presented with. Try to think of each problem as a collection of smaller problems (a sequence of simpler tasks) or as a repeated process of reducing the problem's scope to smaller scopes and then piling those scopes upon each other. Library/package programmers tend to generalize. That is, when presented with a simple specific problem, they usually think of a more general problem and try to solve that general problem which will automatically solve the smaller one."
    },
    {
      "title": "Understand what system programming entails.",
      "content": "Understand what system programming entails. System Programmers deal with the science of programming not the specific implementations of it. Do not tie yourself to a specific platform."
    },
    {
      "title": "Follow the first three steps for Desktop Applications Programmers.",
      "content": "Follow the first three steps for Desktop Applications Programmers."
    },
    {
      "title": "Take an introductory course in Linear Algebra.",
      "content": "Take an introductory course in Linear Algebra ."
    },
    {
      "title": "Take a course in Calculus.",
      "content": "Take a course in Calculus ."
    },
    {
      "title": "Take a course in Logic and/or Discrete Mathematics.",
      "content": "Take a course in Logic and/or Discrete Mathematics."
    },
    {
      "title": "Introduce yourself to different bare operating systems.",
      "content": "Introduce yourself to different bare operating systems. This can be done by: Getting an idea on how operating systems are installed. Learning how to install different operating systems on one PC (optional, but recommended). Installing more than one operating system. Do not install any helping packages on the systems; instead, use the bare functionalities provided by the operating systems."
    },
    {
      "title": "Take a course (or alternatively, read books) on computer hardware architecture.",
      "content": "Take a course (or alternatively, read books) on computer hardware architecture."
    },
    {
      "title": "Develop an understanding of the different computer hardware platforms.",
      "content": "Develop an understanding of the different computer hardware platforms."
    },
    {
      "title": "Get an introductory familiarization with the assembly language of the hardware platform/operating system of choice.",
      "content": "Get an introductory familiarization with the assembly language of the hardware platform/operating system of choice. You will later learn the assembly of other platforms/systems."
    },
    {
      "title": "Learn the ANSI C and C++ languages, along with the concepts of procedural programming.",
      "content": "Learn the ANSI C and C++ languages, along with the concepts of procedural programming."
    },
    {
      "title": "Understand and practice C/C++ standard libraries on the platform of choice.",
      "content": "Understand and practice C/C++ standard libraries on the platform of choice. Pay particular attention to Standard Template Library ( STL ) and maybe Active Template Library ( ATL )."
    },
    {
      "title": "Search online resources, books and courses to get an understanding of the C-flavor of your specific platform.",
      "content": "Search online resources, books and courses to get an understanding of the C-flavor of your specific platform."
    },
    {
      "title": "Practice creating advanced code with C and C++.",
      "content": "Practice creating advanced code with C and C++."
    },
    {
      "title": "Learn more advanced Assembly.",
      "content": "Learn more advanced Assembly."
    },
    {
      "title": "Take a course in operating systems design.",
      "content": "Take a course in operating systems design."
    },
    {
      "title": "Find and read documentations of your specific platform of choice.",
      "content": "Find and read documentations of your specific platform of choice. This will be easier if you choose a Unix-based operating system. Understand the system you will be working with later very well."
    },
    {
      "title": "Practice your acquired knowledge.",
      "content": "Practice your acquired knowledge. First create small system utilities. It is usually useful to: Trying to recreate small tools that are already there on your system. Trying to port utilities available in other operating systems to yours."
    },
    {
      "title": "Learn languages in the most helpful order.",
      "content": "Learn languages in the most helpful order. This is the only place where the first programming language matters. Learn ANSI C first, not C++, not C#, not Java and not D. Then learn C++. Restricting the first language to C and C alone is because systems programming requires that the programmer be familiar with the following concepts: Real and full compilation of source code. Low-level object output files. Linking binaries. Low-level machine-language/assembly programming. The C language is said to be a disguised/easier to learn assembly by some. It also supports inserting assembly language code in code whenever you please and it is only procedural (like assembly)."
    },
    {
      "title": "Know what a programming scientist does.",
      "content": "Know what a programming scientist does. Programming scientists are very advanced programmers who, instead of working on developing applications, work on developing computing technologies such as encryption, programming languages and data mining algorithms. This level is seldom achieved without academic study and dedication."
    },
    {
      "title": "Accumulate the scientific knowledge equivalent to a four-year degree in computer science.",
      "content": "Accumulate the scientific knowledge equivalent to a four-year degree in computer science. This can be done either by: Taking an actual academic degree (which is what usually happens). Getting the courses' outlines for such a degree from one of the modern universities and taking the courses either by self-study or as separate courses. This could be achieved theoretically, but the recommended path is the first."
    },
    {
      "title": "Decide a field of specialty.",
      "content": "Decide a field of specialty. The more specific, the better. This depends on your preferences. However, here is a list of some of the major topics in computer programming science: Algorithm design (searching, sorting, encryption, decryption and error detection in communications are some examples) Programming languages/compiler design/optimization Artificial intelligence fields (pattern recognition, speech recognition, natural language processing, neural networks) Robotics Scientific programming Super computing Computer aided design/modeling (CAD/CAM) Virtual reality Computer graphics (Computer graphics is usually wrongly confused with graphical design or graphical user interface design. Computer graphics is the field of studying how to represent and manipulate graphics in computer systems.)"
    },
    {
      "title": "Consider getting a higher academic degree.",
      "content": "Consider getting a higher academic degree. You might wish to pursue a master's degree or a doctorate."
    },
    {
      "title": "Learn the technologies and programming languages related to your programming field of choice.",
      "content": "Learn the technologies and programming languages related to your programming field of choice."
    }
  ]
}