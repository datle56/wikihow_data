{
  "url": "https://www.wikihow.com/Make-Computer-Games",
  "title": "How to Make Computer Games",
  "steps": [
    {
      "title": "Consider your skills.",
      "content": "Consider your skills. Creating a video game requires many skills. These can include, scriptwriting, programming, art design, character design, level design, 3D modeling, audio design, music composition, and more. If you are working by yourself, or even with a small team, you will need to consider what your strengths are. Your best bet is to design a game around your strengths. If you are a skilled artist, but not a great programmer, you can consider making a game based on a template. You can use a template to create a standard first-person shooter or RPG and then apply your art to the game style. If you are a skilled programmer but not a great artist, consider building a game with unique gameplay that uses a simplistic art style. Plenty of popular independent games are built using 8-bit pixel art or even just minimalist shapes and colors."
    },
    {
      "title": "Create a design document.",
      "content": "Create a design document. Before you build a game, you need to decide what you want to build. Create a design document that contains all the details of the game. This may contain the core game mechanics, concept art, level design, the plot of the game, scripts, and more. This is especially essential if you are working with a team of people. This will help get everyone on the same page. Consider the scale of what you want to create. Many of the most popular games take a team of tens or even hundreds of people many years to create. You're not going to create the next Call of Duty game all on your own. Especially if this is the first game you've ever made. Make sure your ambitions match your skills, resources, and time. [1] X Research source"
    },
    {
      "title": "Decide on a game engine you want to use.",
      "content": "Decide on a game engine you want to use. The game engine is the backbone of the game. It's the software that renders the graphics, processes the sound, processes the button inputs, processes the coding and scripting, and much more. If you are a skilled programmer, you can design your own game engine. More than likely, you'll probably want to use an existing game engine. Luckily, there are plenty of game engines to choose from. Many allow you to download them and start learning for free. The following are some popular game engines you can try: [2] X Research source Unity: Unity is a popular game engine that is used to create both 3D and 2D games. It's fairly easy for beginner developers to learn. It is popular with indie game makers and the mobile game market. You can download Unity from [ https://unity.com/ https://unity.com/ . Unreal Engine: Unreal is a more advanced game engine. It's known for its great visual graphics. It's been used to produce many popular games including Mortal Kombat and Final Fantasy VII Remake. However, it is not an easy engine for beginners to learn. You can download Unreal Engine at https://www.unrealengine.com/en-US/ Amazon Lumberyard: Amazon Lumberyard is a 3D game engine made by Amazon and supported by Amazon Web Services. It is a feature-rich game engine that doesn't take any royalties for the games you produce. It's perfect for Twitch integration and making online games. You can download Lumberyard from https://aws.amazon.com/lumberyard/ . Game Maker Studio: Game Maker Studio is a 2D game engine that doesn't require any coding knowledge. It's great for beginners. You cannot make 3D games with Game Maker Studio. You can download Game Maker Studio from https://gamemaker.io/en Godot: Godot is a free and open-source, game engine developed by MIT. It offers a wide variety of tools for 2D and 3D games. It has a robust community. Since it is open-source, there is no membership fee and no royalties for the games you develop. You can download Godot from https://godotengine.org/ ."
    },
    {
      "title": "Decide on any additional tools you need.",
      "content": "Decide on any additional tools you need. Once you decide on a game engine to use, you may need to decide on additional tools used to create the game assets. These may include programming languages, integrated development environments for coding, graphic design programs, 3D modeling programs, digital audio workstations (DAW), and more. Programming Languages: Some game engines are built so that you can design games without a lot of programming knowledge. However, programming is an useful skill to have and will allow you to do more with your game design. You just need to decide on a programming language to use. Some popular programming languages used in game development include: C#, C++ , Java , and Python . Integrated Development Environments: IDEs are programs that offer tools to computer programmers and allows programmers to collaborate and consolidate their work. Some popular IDEs include: [ [1] ], [ Studio ], and Eclipse . 2D Graphics Software: 2D graphics are flat images. They are used a lot in game development. They can be used to create the HUD, title screen, in-game menus, sprites, backgrounds, and more. 2D graphics can also be used to texture 3D objects in a 3D game. In game development, there are two types of 2D graphics: Raster and Vector . Raster images are made up of pixels. They have defined dimensions. These include JPG, PNG, and BMP images. Raster graphics software includes Adobe Photoshop , and GIMP . Vector graphics are images made up of points of data. They can expand to any size without distorting the image or pixel blurring. These include SVG, and AI files. Vector Graphics software includes Adobe Illustrator , and Inkscape. You can use Adobe Animate to create 2D animations. 3D Graphics Software: If you are making a 3D game, you will need a 3D graphics program that allows you to create and animate 3D objects and meshes. Some popular 3D graphics programs include Blender 3D, and 3DS Max. Digital Audio Workstation: A digital audio workstation is used to produce audio. They can be used to record and produce a game's music as well as master sound effects for a game. Some popular digital audio workstations (DAWs) include: Pro Tools, Ableton Live, and Adobe Audition."
    },
    {
      "title": "Plan the project.",
      "content": "Plan the project. Before you start designing the game, create a list of all the tasks that need to be completed and create a schedule for when you want to complete these tasks. Break large tasks down into smaller tasks. Create a Gantt Chart . Set milestone goals. At the end of each week, write down what you accomplished during the previous week and what you hope to accomplish the next week. Compare those notes from last week's notes. [3] X Research source If you go a little overschedule don't worry too much. There is always going to be unexpected problems that come up in game development. Even experienced producers will often take their best time and add 50%. If you go over by more than 300%, you may need to consider scaling back the project. If this is the first game you have ever created, don't plan on making anything that takes more than a month to make. It'll probably take more than a month, but that's okay. Don't go into it with any major ideas in mind. Your first game should be a learning experience. Use this as an opportunity to see what you can create. Create something simple, and then move on to the next project. Be proud of what you created. Even if it's not very good."
    },
    {
      "title": "Create a prototype for your game.",
      "content": "Create a prototype for your game. Once you have the tools needed to make a game, it's time to start creating. Start by creating a simple prototype. It should not take more than 3 weeks to complete. This should only contain the core mechanics with no special features. In game development, this is called the \"minimum viable product.\" This gives you something to play and test. You can learn a lot about your game by actually playing it. The prototype will let you experience what aspects of the game are engaging and what is not. This lets you create a solid foundation to build the rest of your game upon. For example, if you are making a first-person shooter, your prototype doesn't need to be a huge level with a plethora of enemies, multiple customizable weapons, and killer graphics. Your prototype would just be a single room with 1 enemy type and 1 weapon that you can shoot. [4] X Research source"
    },
    {
      "title": "Create the assets of the game.",
      "content": "Create the assets of the game. Once you have an idea of what the final product of the game is going to be, it's time to start creating all the game assets. The assets are everything the game is made of. This includes the character models/sprites, enemy model/sprites, animations, level design, scripts, sound effects, music, and more. All of this will need to be constructed individually and then imported into the game engine. If there are game assets that you don't know how to make or don't have time to make, many game engines have an assets store where you can purchase game assets made by other people and import them into your own game. Some games are made entirely of assets purchased from the assets store."
    },
    {
      "title": "Test your game.",
      "content": "Test your game. You can learn a lot by playing a game that you made. You can also learn a lot by watching others play your game. Playtesting should be done at all stages of game development from the early prototype stages to crunch-time just before launch. [5] X Research source Playtest using players of all skill levels. Don't just used skill gamers unless that is the niche you are going for. Don't explain too much about the game at first. Just let the Playtester have a crack at it. If they get stuck or get confused, then you can go ahead and give a little bit of an explanation. Pay attention to what playtesters do on their own in the game. See where they get stuck and where they need instruction. Figure out where they spent most of their time looking in the game. Pay attention to the playtesters reactions during the game. See what makes them gasp, sigh, or make other audible noises Write down any feedback you get. Pay attention to what order they give their feedback in. This explains what is most important to them. Don't get defensive or feel the need to explain anything when you receive negative feedback. Don't force playtesters to continue to play your game. Allow them to quit and walk away. When they decide to give up on your game is an important data point in and of itself. Have a test survey for your playtesters to fill out. Be sure to include 1-10 rating questions that can be turned into data and include a section for comments at the end. The worst playtester for a game is yourself. The second worst playtester for a game is friends and family. They are biased."
    },
    {
      "title": "Make adjustments to your game.",
      "content": "Make adjustments to your game. After you receive feedback from playtesting, make the necessary corrections to your game. Check the data points from the surveys to make sure the numbers are trending upwards. Make sure you are correcting the issues that need to be corrected. Be flexible with your ideas. During playtesting, you may find out that you are wrong about your game. What you thought would be the most engaging may not be what others thought was engaging."
    },
    {
      "title": "Polish and optimize your game.",
      "content": "Polish and optimize your game. When your game is nearing completion, then you can add some bells and whistles to the game. Feel free to enhance the graphics and add additional effects and sounds, but be aware of how these additions affect the game's performance. Make sure the framerate stays consistent through the majority of the gameplay. If you find that adding a particular effect is slowing down the game, consider if the effect is needed or if it can be implemented in a way that isn't as hardware-intensive. If you are planning on selling your game to a wider audience, your goal should be to make a game that can play on as many PCs as possible. Create options that allow players with lower-end PCs to be able to turn off the more hardware-intensive features."
    },
    {
      "title": "Publish and distribute your game.",
      "content": "Publish and distribute your game. Unless this is your first game and you are doing it just for the learning experience, you'll probably want to sell your game and earn some money for your hard work. Luckily Windows is an open platform that allows anybody to develop software for it. Many game engines have the ability to publish a working version of the game for you to ship. Once your game is finished, you'll need a way to distribute the game. Luckily, there are plenty of online distribution platforms you can turn to. Look for a digital distribution website that will carry your game. Today, it's easier than ever to get your game on a platform like Steam or a more independent platform like Itch.io. Whichever platform you choose, make sure you understand the quality control process for that platform. Before your game launches, start building up some buzz. Create a website and a promo trailer. Talk to independent gaming websites. Do interviews and go on podcasts. Post about your game on social media."
    }
  ]
}